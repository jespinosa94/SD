import java.lang.Exception;
import java.net.Socket;
import java.io.*;
import java.rmi.*;
import java.rmi.server.*;
import java.time.*;
import java.util.*;

public class HiloController extends Thread {
	private Socket skCliente;
	private String ipRMI="";
	private String puertoRMI="";
	private String atributoSensor = "";
	private String idSensor = "";
	
	public HiloController(Socket p_cliente, String ipRMI, String puertoRMI) {
		this.skCliente = p_cliente;
		this.ipRMI = ipRMI;
		this.puertoRMI = puertoRMI;
	}
	
	public String leeSocket(Socket p_sk, String p_Datos) {
		try {
			InputStream aux = p_sk.getInputStream();
			BufferedReader flujo = new BufferedReader(new InputStreamReader(aux));
			p_Datos = flujo.readLine();
		} catch(Exception e) {
			System.out.println("Error: " + e.toString());
		}
		return p_Datos;
	}
	
	public void escribeSocket(Socket p_sk, String p_Datos) {
		try {
			OutputStream aux = p_sk.getOutputStream();
			PrintWriter flujo = new PrintWriter(new OutputStreamWriter(aux));
			flujo.println(p_Datos);
			flujo.flush(); //Limpieza del Buffer
		} catch(Exception e) {
			System.out.println("Error: " + e.toString());
		}
	}
	
	public String leerArchivo(String s) {
		String lectura = "";
		File fichero = new File(System.getProperty("user.dir") + s); //Obtiene la ruta del fichero
		try {
			FileReader fr = new FileReader(fichero);
			BufferedReader br = new BufferedReader(fr);
			String linea;
			while((linea = br.readLine()) != null) {
				lectura += linea;
			}
			fr.close();
			br.close();
		} catch(Exception e) {
			lectura = "Error 404: fichero no encontrado";
		}
		
		return lectura;
	}
	
	public String ObtenerIndiceSensores(InterfazSensor sensor, String servidor) {
		String resultado;
		System.out.println("Controller pide el indice de sensores");
		String cuerpo = "";
		System.setSecurityManager(new RMISecurityManager());
		String servidorGeneral = "rmi://" + ipRMI + ":" + puertoRMI;
		
		System.println("Controller pide indice general con: " + servidorGeneral); //"rmi://" + ipRMI + ":" + puertoRMI + "/ObjetoSensor"; sin el objetoSensor
		String[] sensores = Naming.list(servidorGeneral);
		cuerpo = leerArchivo("/multi-index.html");
		for(int i=0; i<sensores.length; i++) {
			System.out.println("Sensor " + i + ": sensores[i");
			//sensor = (InterfazRemoto) Naming.lookup(sensores[i]);
		}
		
		return resultado;
	}
	
	@SuppressWarnings("deprecation")
	public String procesaPeticionRMI(InterfazSensor sensor, String servidor) {
		String respuesta = "";
		if(atributoSensor.contains("volumen")) {
			System.out.println("Controller pide el volumen " + "del sensor " + idSensor);
//d				System.out.println("[" + sensor.GetVolumen() + "]");
			
			String cuerpo = "";
			cuerpo = leerArchivo("/index.html");
			try {
				if(cuerpo.contains("404")) {
					System.out.println("Error al crear la p치gina HTML del recurso pedido");
				} else {
					cuerpo+="<h1> Sensor " + idSensor + "</h1> </div>";
					cuerpo+="<div class=\"color1 col-md-9\"> <h2> Volumen = " + sensor.GetVolumen() + "</h2> </div> </div> </div> </body> </html>";
				}	
			} catch(Exception e) {
				System.out.println(e.toString());
			}
			respuesta = cuerpo;
		}
		else if(atributoSensor.contains("fechaActual")) {
			System.out.println("Controller pide la fecha actual del sensor " + idSensor);
			String cuerpo ="";
			cuerpo = leerArchivo("/index.html");
			
			try {
				cuerpo+="<h1> Sensor " + idSensor + "</h1> </div>";
				cuerpo+="<div class=\"color1 col-md-9\"> <h2> Fecha actual = " + sensor.GetFechaActual().toString() + "</h2> </div> </div> </div> </body> </html>";
			} catch(Exception e) {
				System.out.println(e.toString());
			}
			respuesta = cuerpo;
		}
		else if(atributoSensor.contains("ultimaFecha")) {
			System.out.println("Controller pide la ultima fecha registrada del sensor " + idSensor);
			String cuerpo ="";
			cuerpo = leerArchivo("/index.html");
			
			try {
				cuerpo+="<h1> Sensor " + idSensor + "</h1> </div>";
				cuerpo+="<div class=\"color1 col-md-9\"> <h2> Ultima fecha registrada = " + sensor.GetFechaUltimoCambio().toString() + "</h2> </div> </div> </div> </body> </html>";
			} catch(Exception e) {
				System.out.println(e.toString());
			}
			respuesta = cuerpo;
		}
		else if(atributoSensor.contains("LED")) {
			System.out.println("Controller pide el valor actual del led del sensor " + idSensor);
			String cuerpo ="";
			cuerpo = leerArchivo("/index.html");
			
			try {
				cuerpo+="<h1> Sensor " + idSensor + "</h1> </div>";
				cuerpo+="<div class=\"color1 col-md-9\"> <h2> Valor LED = " + Integer.toString(sensor.GetLED()) + "</h2> </div> </div> </div> </body> </html>";
			} catch(Exception e) {
				System.out.println(e.toString());
			}
			respuesta = cuerpo;
		}
		else if(atributoSensor.contains("set")) {
			int valor =  Integer.parseInt(atributoSensor.split("=")[1]);
			System.out.println("Controller pide modificar el valor actual del led del sensor " + idSensor + " a " + Integer.toString(valor));
			String cuerpo ="";
			cuerpo = leerArchivo("/index.html");
			
			try {
				String nombreFichero = "/sensor" + idSensor + ".txt";
				sensor.SetLED(valor, nombreFichero);
				cuerpo+="<h1> Sensor " + idSensor + "</h1> </div>";
				cuerpo+="<div class=\"color1 col-md-9\"> <h2> Valor LED cambiado a = " + Integer.toString(sensor.GetLED()) + "</h2> </div> </div> </div> </body> </html>";
			} catch(Exception e) {
				System.out.println(e.toString());
			}
			respuesta = cuerpo;
		}
		else if(atributoSensor.equals("/")) {
			respuesta = ObtenerIndiceSensores(sensor, servidor);
		}
		
		return respuesta;
	}
	
	@SuppressWarnings("deprecation")
	public void run() {
		InterfazSensor sensor = null;
		String servidor = "rmi://" + ipRMI + ":" + puertoRMI + "/ObjetoSensor";
		String Cadena = "";
		String datosSocket = "";
		
		/*
		 * Instanciaci칩n de todos los objetos remotos conocidos en el registro
		 */
		/*try {
			System.setSecurityManager(new RMISecurityManager());
			String[] sensores = Naming.list(servidor);
		} catch(Exception e) {
			System.out.println("Error al instanciar los objetos remotos: " + e.toString());
			System.exit(0);
		}*/
		
		try {
			Cadena = this.leeSocket(skCliente, Cadena);
			//Desencapsulaci칩n de la informaci칩n recibida por HttpServer
			atributoSensor = Cadena.split(" ")[0];
			idSensor = Cadena.split(" ")[1];
			System.out.println("Valores que recibe el controller: " + "[Atributo = " + atributoSensor + "], [id = " + idSensor + "]"); /* /controladorSD/volumen?Sonda=1 */
			
			System.setSecurityManager(new RMISecurityManager());
			sensor = (InterfazSensor) Naming.lookup(servidor + idSensor);			
			datosSocket = procesaPeticionRMI(sensor, servidor);
//d			System.out.print(datosSocket);
			escribeSocket(skCliente, datosSocket);
			skCliente.close();
		} catch(Exception e) {
			System.out.println("Error accediendo al objeto remoto que buscas: " + e.toString());
		}
	}
}

































